@page "/clientes"
@using ClientApp.Services
@using SharedModels

@inject ClienteService ClienteService
@inject NavigationManager navigationManager

<h1>Clientes</h1>

@if (clientes == null || !clientes.Any())
{
    <p>Carregando clientes...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nome</th>
                <th>CNPJ</th>
                <th>Data de Fundação</th>
                <th>Ativo</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>
                    <td>@cliente.Nome</td>
                    <td>@cliente.Cnpj</td>
                    <td>@cliente.DataFundacao.ToShortDateString()</td>
                    <td>@(cliente.Ativo ? "Sim" : "Não")</td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary d-flex align-items-center position-fixed p-3" style="bottom: 20px; right: 20px; border-radius: 20px;" @onclick="Navigate">
    <span class="d-none d-sm-inline me-2">Novo </span>
    <i class="material-icons">add</i>
</button>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

@code {

    private IEnumerable<ClienteDto>? clientes;

    protected override async Task OnInitializedAsync()
    {
        await CarregarClientesAsync();
    }

    private async Task CarregarClientesAsync()
    {
        try
        {
            clientes = await ClienteService.GetClientesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar clientes: {ex.Message}");
        }
    }

    void Navigate()
    {
        navigationManager.NavigateTo("/Cliente");
    }
}